
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  passwordHash: 'passwordHash',
  email: 'email'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  type: 'type',
  currency: 'currency',
  balance: 'balance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  type: 'type',
  color: 'color'
};

exports.Prisma.RecurrenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  frequency: 'frequency',
  totalParts: 'totalParts',
  currentPart: 'currentPart',
  startDate: 'startDate',
  nextDate: 'nextDate',
  active: 'active'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  amount: 'amount',
  date: 'date',
  description: 'description',
  categoryId: 'categoryId',
  sourceAccountId: 'sourceAccountId',
  targetAccountId: 'targetAccountId',
  recurrenceId: 'recurrenceId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.TransactionType = exports.$Enums.TransactionType = {
  INCOME: 'INCOME',
  EXPENSE: 'EXPENSE',
  TRANSFER: 'TRANSFER',
  INVESTMENT: 'INVESTMENT',
  RETURN: 'RETURN',
  PAYMENT: 'PAYMENT'
};

exports.AccountType = exports.$Enums.AccountType = {
  BANK: 'BANK',
  WALLET: 'WALLET',
  CASH: 'CASH',
  CARD: 'CARD',
  INVESTMENT: 'INVESTMENT'
};

exports.Currency = exports.$Enums.Currency = {
  ARS: 'ARS',
  USD: 'USD',
  USDT: 'USDT'
};

exports.CategoryType = exports.$Enums.CategoryType = {
  GASTO: 'GASTO',
  PAGO: 'PAGO',
  INGRESO: 'INGRESO',
  RENDIMIENTO: 'RENDIMIENTO'
};

exports.RecurrenceType = exports.$Enums.RecurrenceType = {
  MONTHLY: 'MONTHLY',
  WEEKLY: 'WEEKLY',
  YEARLY: 'YEARLY',
  INSTALLMENT: 'INSTALLMENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Category: 'Category',
  Recurrence: 'Recurrence',
  Transaction: 'Transaction'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/fedepaz/Documents/proyectos/appFinance/finance-app/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-1.1.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/fedepaz/Documents/proyectos/appFinance/finance-app/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// Proposed prisma.schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id           String        @id @default(cuid())\n  name         String\n  passwordHash String\n  email        String?       @unique\n  transactions Transaction[]\n  accounts     Account[]\n  categories   Category[]\n  recurrences  Recurrence[]\n}\n\nmodel Account {\n  id        Int         @id @default(autoincrement())\n  userId    String\n  name      String\n  type      AccountType\n  currency  Currency\n  balance   Decimal     @default(0)\n  createdAt DateTime    @default(now())\n  updatedAt DateTime    @updatedAt\n\n  user             User          @relation(fields: [userId], references: [id])\n  // relaciones dobles (origen/destino) para transferencias internas\n  transactionsFrom Transaction[] @relation(\"SourceAccount\")\n  transactionsTo   Transaction[] @relation(\"TargetAccount\")\n}\n\nmodel Category {\n  id           Int           @id @default(autoincrement())\n  userId       String\n  name         String\n  type         CategoryType\n  color        String? // opcional para UI\n  user         User          @relation(fields: [userId], references: [id])\n  transactions Transaction[]\n}\n\nmodel Recurrence {\n  id          Int            @id @default(autoincrement())\n  userId      String\n  name        String\n  frequency   RecurrenceType\n  totalParts  Int?\n  currentPart Int?\n  startDate   DateTime\n  nextDate    DateTime?\n  active      Boolean        @default(true)\n\n  user         User          @relation(fields: [userId], references: [id])\n  transactions Transaction[]\n}\n\nmodel Transaction {\n  id              Int             @id @default(autoincrement())\n  userId          String\n  type            TransactionType\n  amount          Decimal\n  date            DateTime\n  description     String?\n  categoryId      Int?\n  sourceAccountId Int?\n  targetAccountId Int?\n  recurrenceId    Int?\n  metadata        Json? // cuotas, tasas, observaciones\n  createdAt       DateTime        @default(now())\n  updatedAt       DateTime        @updatedAt\n\n  user          User        @relation(fields: [userId], references: [id])\n  category      Category?   @relation(fields: [categoryId], references: [id])\n  sourceAccount Account?    @relation(\"SourceAccount\", fields: [sourceAccountId], references: [id])\n  targetAccount Account?    @relation(\"TargetAccount\", fields: [targetAccountId], references: [id])\n  recurrence    Recurrence? @relation(fields: [recurrenceId], references: [id])\n}\n\n// -------- ENUMS --------\n\nenum TransactionType {\n  INCOME\n  EXPENSE\n  TRANSFER\n  INVESTMENT\n  RETURN\n  PAYMENT\n}\n\nenum AccountType {\n  BANK\n  WALLET\n  CASH\n  CARD\n  INVESTMENT\n}\n\nenum Currency {\n  ARS\n  USD\n  USDT\n}\n\nenum CategoryType {\n  GASTO\n  PAGO\n  INGRESO\n  RENDIMIENTO\n}\n\nenum RecurrenceType {\n  MONTHLY\n  WEEKLY\n  YEARLY\n  INSTALLMENT\n}\n",
  "inlineSchemaHash": "818fe3529b6fed06a5c086530899e6b79053acd451452ee4cd50adbf16d815fd",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"TransactionToUser\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"},{\"name\":\"categories\",\"kind\":\"object\",\"type\":\"Category\",\"relationName\":\"CategoryToUser\"},{\"name\":\"recurrences\",\"kind\":\"object\",\"type\":\"Recurrence\",\"relationName\":\"RecurrenceToUser\"}],\"dbName\":null},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"AccountType\"},{\"name\":\"currency\",\"kind\":\"enum\",\"type\":\"Currency\"},{\"name\":\"balance\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"},{\"name\":\"transactionsFrom\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"SourceAccount\"},{\"name\":\"transactionsTo\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"TargetAccount\"}],\"dbName\":null},\"Category\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"CategoryType\"},{\"name\":\"color\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CategoryToUser\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"CategoryToTransaction\"}],\"dbName\":null},\"Recurrence\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"frequency\",\"kind\":\"enum\",\"type\":\"RecurrenceType\"},{\"name\":\"totalParts\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"currentPart\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"nextDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"active\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RecurrenceToUser\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"RecurrenceToTransaction\"}],\"dbName\":null},\"Transaction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"TransactionType\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"categoryId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sourceAccountId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"targetAccountId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"recurrenceId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TransactionToUser\"},{\"name\":\"category\",\"kind\":\"object\",\"type\":\"Category\",\"relationName\":\"CategoryToTransaction\"},{\"name\":\"sourceAccount\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"SourceAccount\"},{\"name\":\"targetAccount\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"TargetAccount\"},{\"name\":\"recurrence\",\"kind\":\"object\",\"type\":\"Recurrence\",\"relationName\":\"RecurrenceToTransaction\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

