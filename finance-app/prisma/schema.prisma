// Proposed prisma.schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  email           String            @unique
  transactions    Transaction[]
  dailyExpenses   DailyExpense[]
  balances        Balance[]
  cardExpenses    CardExpense[]
  investmentReturns InvestmentReturn[]
  extraExpenses   ExtraExpense[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id          String          @id @default(cuid())
  date        DateTime
  amount      Decimal         @db.Decimal(12, 2)
  concept     String
  type        TransactionType
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  Int?
  category    Category?       @relation(fields: [categoryId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([userId, date])
}

model DailyExpense {
  id        String   @id @default(cuid())
  date      DateTime
  amount    Decimal  @db.Decimal(12, 2)
  type      String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, date])
}

model Balance {
  id               String   @id @default(cuid())
  date             DateTime
  mercadoPagoBalance Decimal? @db.Decimal(12, 2)
  bankBalance      Decimal? @db.Decimal(12, 2)
  cashBalance      Decimal? @db.Decimal(12, 2)
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([userId, date])
}

model CardExpense {
  id          String   @id @default(cuid())
  date        DateTime
  amount      Decimal  @db.Decimal(12, 2)
  type        String?
  cardType    String // e.g., "mastercard", "visa"
  installments String? // e.g., "11/12"
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, date])
}

model InvestmentReturn {
  id        String   @id @default(cuid())
  reserve   String
  amount    Decimal  @db.Decimal(12, 2)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model ExtraExpense {
  id        String   @id @default(cuid())
  date      DateTime
  amount    Decimal  @db.Decimal(12, 2)
  type      String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, date])
}

enum TransactionType {
  INCOME
  EXPENSE
  PAYMENT
}
